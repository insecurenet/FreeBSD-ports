--- a/database/object.cpp
+++ b/database/object.cpp
@@ -1023,7 +1024,7 @@ void cUPnPObjectFactory::registerMediato
     }
     MESSAGE(VERBOSE_SDK, "Registering mediator for class '%s'", UPnPClass);
     this->mMediators[UPnPClass] = Mediator;
-    MESSAGE(VERBOSE_SDK, "Now %d mediators registered", this->mMediators.size());
+    MESSAGE(VERBOSE_SDK, "Now %ld mediators registered", (long)this->mMediators.size());
     return;
 }
 
@@ -1040,7 +1041,7 @@ void cUPnPObjectFactory::unregisterMedia
     MESSAGE(VERBOSE_SDK, "Unregistering mediator for class '%s'", UPnPClass);
     this->mMediators.erase(MediatorIterator);
     if(freeMediator) delete MediatorIterator->second;
-    MESSAGE(VERBOSE_SDK, "Now %d mediators registered", this->mMediators.size());
+    MESSAGE(VERBOSE_SDK, "Now %ld mediators registered", (long)this->mMediators.size());
     return;
 }
 
@@ -1067,7 +1068,7 @@ cMediatorInterface* cUPnPObjectFactory::
 
 cMediatorInterface* cUPnPObjectFactory::findMediatorByClass(const char* Class){
     if(!Class){ ERROR("No class specified"); return NULL; }
-    MESSAGE(VERBOSE_SQL, "Searching for mediator '%s' in %d mediators", Class, this->mMediators.size());
+    MESSAGE(VERBOSE_SQL, "Searching for mediator '%s' in %ld mediators", Class, (long)this->mMediators.size());
     tMediatorMap::iterator MediatorIterator = this->mMediators.find(Class);
     if(MediatorIterator==this->mMediators.end()){
         ERROR("No matching mediator for class '%s'",Class);
--- a/receiver/recplayer.cpp
+++ b/receiver/recplayer.cpp
@@ -58,7 +58,7 @@ int cRecordingPlayer::read(char* buf, si
         ERROR("Current part of record is not open");
         return -1;
     }
-    MESSAGE(VERBOSE_RECORDS, "Reading %d from record", buflen);
+    MESSAGE(VERBOSE_RECORDS, "Reading %ld from record", (long)buflen);
     int bytesread = 0;
     while((bytesread = this->mCurrentFile->Read(buf, buflen)) == 0){ // EOF, try next file
         if(!(this->mCurrentFile = this->mRecordingFile->NextFile())){
--- a/server/server.cpp
+++ b/server/server.cpp
@@ -278,7 +281,7 @@ bool cUPnPServer::autoDetectSettings(voi
     char** Ifaces = getNetworkInterfaces(&count);
     int i=0;
     bool ret = false;
-    MESSAGE(VERBOSE_CUSTOM_OUTPUT, "AUTODETECT: Found %d possible interfaces.", sizeof(Ifaces));
+    MESSAGE(VERBOSE_CUSTOM_OUTPUT, "AUTODETECT: Found %ld possible interfaces.", (long)sizeof(Ifaces));
     while(Ifaces[i]){
         if(strcmp(Ifaces[i],"lo")!=0){
             //    true || false == true
