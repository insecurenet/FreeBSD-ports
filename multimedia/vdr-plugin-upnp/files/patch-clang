--- a/misc/util.cpp
+++ b/misc/util.cpp
@@ -331,105 +331,105 @@ const char* escapeXMLCharacters(const ch
     for(unsigned int i = 0; i < strlen(Data); i++){
         Char = Data[i];
         switch(Char){
-            case L'€': NewData += "&euro;"; break;
-            case L'"': NewData += "&quot;"; break;
-            case L'&': NewData += "&amp;"; break;
-            case L'<': NewData += "&lt;"; break;
-            case L'>': NewData += "&gt;"; break;
-            case L'¡': NewData += "&iexcl;"; break;
-            case L'¢': NewData += "&cent;"; break;
-            case L'£': NewData += "&pound;"; break;
-            case L'¤': NewData += "&curren;"; break;
-            case L'¥': NewData += "&yen;"; break;
-            case L'¦': NewData += "&brvbar;"; break;
-            case L'§': NewData += "&sect;"; break;
-            case L'¨': NewData += "&uml;"; break;
-            case L'©': NewData += "&copy;"; break;
-            case L'ª': NewData += "&ordf;"; break;
-            case L'¬': NewData += "&not;"; break;
-            case L'­': NewData += "&shy;"; break;
-            case L'®': NewData += "&reg;"; break;
-            case L'¯': NewData += "&macr;"; break;
-            case L'°': NewData += "&deg;"; break;
-            case L'±': NewData += "&plusmn;"; break;
-            case L'²': NewData += "&sup2;"; break;
-            case L'³': NewData += "&sup3;"; break;
-            case L'´': NewData += "&acute;"; break;
-            case L'µ': NewData += "&micro;"; break;
-            case L'¶': NewData += "&para;"; break;
-            case L'·': NewData += "&middot;"; break;
-            case L'¸': NewData += "&cedil;"; break;
-            case L'¹': NewData += "&sup1;"; break;
-            case L'º': NewData += "&ordm;"; break;
-            case L'»': NewData += "&raquo;"; break;
-            case L'«': NewData += "&laquo;"; break;
-            case L'¼': NewData += "&frac14;"; break;
-            case L'½': NewData += "&frac12;"; break;
-            case L'¾': NewData += "&frac34;"; break;
-            case L'¿': NewData += "&iquest;"; break;
-            case L'À': NewData += "&Agrave;"; break;
-            case L'Á': NewData += "&Aacute;"; break;
-            case L'Â': NewData += "&Acirc;"; break;
-            case L'Ã': NewData += "&Atilde;"; break;
-            case L'Ä': NewData += "&Auml;"; break;
-            case L'Å': NewData += "&Aring;"; break;
-            case L'Æ': NewData += "&AElig;"; break;
-            case L'Ç': NewData += "&Ccedil;"; break;
-            case L'È': NewData += "&Egrave;"; break;
-            case L'É': NewData += "&Eacute;"; break;
-            case L'Ê': NewData += "&Ecirc;"; break;
-            case L'Ë': NewData += "&Euml;"; break;
-            case L'Ì': NewData += "&Igrave;"; break;
-            case L'Í': NewData += "&Iacute;"; break;
-            case L'Î': NewData += "&Icirc;"; break;
-            case L'Ï': NewData += "&Iuml;"; break;
-            case L'Ð': NewData += "&ETH;"; break;
-            case L'Ñ': NewData += "&Ntilde;"; break;
-            case L'Ò': NewData += "&Ograve;"; break;
-            case L'Ó': NewData += "&Oacute;"; break;
-            case L'Ô': NewData += "&Ocirc;"; break;
-            case L'Õ': NewData += "&Otilde;"; break;
-            case L'Ö': NewData += "&Ouml;"; break;
-            case L'×': NewData += "&times;"; break;
-            case L'Ø': NewData += "&Oslash;"; break;
-            case L'Ù': NewData += "&Ugrave;"; break;
-            case L'Ú': NewData += "&Uacute;"; break;
-            case L'Û': NewData += "&Ucirc;"; break;
-            case L'Ü': NewData += "&Uuml;"; break;
-            case L'Ý': NewData += "&Yacute;"; break;
-            case L'Þ': NewData += "&THORN;"; break;
-            case L'ß': NewData += "&szlig;"; break;
-            case L'à': NewData += "&agrave;"; break;
-            case L'á': NewData += "&aacute;"; break;
-            case L'â': NewData += "&acirc;"; break;
-            case L'ã': NewData += "&atilde;"; break;
-            case L'ä': NewData += "&auml;"; break;
-            case L'å': NewData += "&aring;"; break;
-            case L'æ': NewData += "&aelig;"; break;
-            case L'ç': NewData += "&ccedil;"; break;
-            case L'è': NewData += "&egrave;"; break;
-            case L'é': NewData += "&eacute;"; break;
-            case L'ê': NewData += "&ecirc;"; break;
-            case L'ë': NewData += "&euml;"; break;
-            case L'ì': NewData += "&igrave;"; break;
-            case L'í': NewData += "&iacute;"; break;
-            case L'î': NewData += "&icirc;"; break;
-            case L'ï': NewData += "&iuml;"; break;
-            case L'ð': NewData += "&eth;"; break;
-            case L'ñ': NewData += "&ntilde;"; break;
-            case L'ò': NewData += "&ograve;"; break;
-            case L'ó': NewData += "&oacute;"; break;
-            case L'ô': NewData += "&ocirc;"; break;
-            case L'õ': NewData += "&otilde;"; break;
-            case L'ö': NewData += "&ouml;"; break;
-            case L'÷': NewData += "&divide;"; break;
-            case L'ø': NewData += "&oslash;"; break;
-            case L'ù': NewData += "&ugrave;"; break;
-            case L'ú': NewData += "&uacute;"; break;
-            case L'û': NewData += "&ucirc;"; break;
-            case L'ü': NewData += "&uuml;"; break;
-            case L'ý': NewData += "&yacute;"; break;
-            case L'þ': NewData += "&thorn;"; break;
+            case /* L'€' */ 0x20ac: NewData += "&euro;"; break;
+            case /* L'"' */ 0x22: NewData += "&quot;"; break;
+            case /* L'&' */ 0x26: NewData += "&amp;"; break;
+            case /* L'<' */ 0x3c: NewData += "&lt;"; break;
+            case /* L'>' */ 0x3e: NewData += "&gt;"; break;
+            case /* L'¡' */ 0xa1: NewData += "&iexcl;"; break;
+            case /* L'¢' */ 0xa2: NewData += "&cent;"; break;
+            case /* L'£' */ 0xa3: NewData += "&pound;"; break;
+            case /* L'¤' */ 0xa4: NewData += "&curren;"; break;
+            case /* L'¥' */ 0xa5: NewData += "&yen;"; break;
+            case /* L'¦' */ 0xa6: NewData += "&brvbar;"; break;
+            case /* L'§' */ 0xa7: NewData += "&sect;"; break;
+            case /* L'¨' */ 0xa8: NewData += "&uml;"; break;
+            case /* L'©' */ 0xa9: NewData += "&copy;"; break;
+            case /* L'ª' */ 0xaa: NewData += "&ordf;"; break;
+            case /* L'¬' */ 0xac: NewData += "&not;"; break;
+            case /* L'­' */ 0xad: NewData += "&shy;"; break;
+            case /* L'®' */ 0xae: NewData += "&reg;"; break;
+            case /* L'¯' */ 0xaf: NewData += "&macr;"; break;
+            case /* L'°' */ 0xb0: NewData += "&deg;"; break;
+            case /* L'±' */ 0xb1: NewData += "&plusmn;"; break;
+            case /* L'²' */ 0xb2: NewData += "&sup2;"; break;
+            case /* L'³' */ 0xb3: NewData += "&sup3;"; break;
+            case /* L'´' */ 0xb4: NewData += "&acute;"; break;
+            case /* L'µ' */ 0xb5: NewData += "&micro;"; break;
+            case /* L'¶' */ 0xb6: NewData += "&para;"; break;
+            case /* L'·' */ 0xb7: NewData += "&middot;"; break;
+            case /* L'¸' */ 0xb8: NewData += "&cedil;"; break;
+            case /* L'¹' */ 0xb9: NewData += "&sup1;"; break;
+            case /* L'º' */ 0xba: NewData += "&ordm;"; break;
+            case /* L'»' */ 0xbb: NewData += "&raquo;"; break;
+            case /* L'«' */ 0xab: NewData += "&laquo;"; break;
+            case /* L'¼' */ 0xbc: NewData += "&frac14;"; break;
+            case /* L'½' */ 0xbd: NewData += "&frac12;"; break;
+            case /* L'¾' */ 0xbe: NewData += "&frac34;"; break;
+            case /* L'¿' */ 0xbf: NewData += "&iquest;"; break;
+            case /* L'À' */ 0xc0: NewData += "&Agrave;"; break;
+            case /* L'Á' */ 0xc1: NewData += "&Aacute;"; break;
+            case /* L'Â' */ 0xc2: NewData += "&Acirc;"; break;
+            case /* L'Ã' */ 0xc3: NewData += "&Atilde;"; break;
+            case /* L'Ä' */ 0xc4: NewData += "&Auml;"; break;
+            case /* L'Å' */ 0xc5: NewData += "&Aring;"; break;
+            case /* L'Æ' */ 0xc6: NewData += "&AElig;"; break;
+            case /* L'Ç' */ 0xc7: NewData += "&Ccedil;"; break;
+            case /* L'È' */ 0xc8: NewData += "&Egrave;"; break;
+            case /* L'É' */ 0xc9: NewData += "&Eacute;"; break;
+            case /* L'Ê' */ 0xca: NewData += "&Ecirc;"; break;
+            case /* L'Ë' */ 0xcb: NewData += "&Euml;"; break;
+            case /* L'Ì' */ 0xcc: NewData += "&Igrave;"; break;
+            case /* L'Í' */ 0xcd: NewData += "&Iacute;"; break;
+            case /* L'Î' */ 0xce: NewData += "&Icirc;"; break;
+            case /* L'Ï' */ 0xcf: NewData += "&Iuml;"; break;
+            case /* L'Ð' */ 0xd0: NewData += "&ETH;"; break;
+            case /* L'Ñ' */ 0xd1: NewData += "&Ntilde;"; break;
+            case /* L'Ò' */ 0xd2: NewData += "&Ograve;"; break;
+            case /* L'Ó' */ 0xd3: NewData += "&Oacute;"; break;
+            case /* L'Ô' */ 0xd4: NewData += "&Ocirc;"; break;
+            case /* L'Õ' */ 0xd5: NewData += "&Otilde;"; break;
+            case /* L'Ö' */ 0xd6: NewData += "&Ouml;"; break;
+            case /* L'×' */ 0xd7: NewData += "&times;"; break;
+            case /* L'Ø' */ 0xd8: NewData += "&Oslash;"; break;
+            case /* L'Ù' */ 0xd9: NewData += "&Ugrave;"; break;
+            case /* L'Ú' */ 0xda: NewData += "&Uacute;"; break;
+            case /* L'Û' */ 0xdb: NewData += "&Ucirc;"; break;
+            case /* L'Ü' */ 0xdc: NewData += "&Uuml;"; break;
+            case /* L'Ý' */ 0xdd: NewData += "&Yacute;"; break;
+            case /* L'Þ' */ 0xde: NewData += "&THORN;"; break;
+            case /* L'ß' */ 0xdf: NewData += "&szlig;"; break;
+            case /* L'à' */ 0xe0: NewData += "&agrave;"; break;
+            case /* L'á' */ 0xe1: NewData += "&aacute;"; break;
+            case /* L'â' */ 0xe2: NewData += "&acirc;"; break;
+            case /* L'ã' */ 0xe3: NewData += "&atilde;"; break;
+            case /* L'ä' */ 0xe4: NewData += "&auml;"; break;
+            case /* L'å' */ 0xe5: NewData += "&aring;"; break;
+            case /* L'æ' */ 0xe6: NewData += "&aelig;"; break;
+            case /* L'ç' */ 0xe7: NewData += "&ccedil;"; break;
+            case /* L'è' */ 0xe8: NewData += "&egrave;"; break;
+            case /* L'é' */ 0xe9: NewData += "&eacute;"; break;
+            case /* L'ê' */ 0xea: NewData += "&ecirc;"; break;
+            case /* L'ë' */ 0xeb: NewData += "&euml;"; break;
+            case /* L'ì' */ 0xec: NewData += "&igrave;"; break;
+            case /* L'í' */ 0xed: NewData += "&iacute;"; break;
+            case /* L'î' */ 0xee: NewData += "&icirc;"; break;
+            case /* L'ï' */ 0xef: NewData += "&iuml;"; break;
+            case /* L'ð' */ 0xf0: NewData += "&eth;"; break;
+            case /* L'ñ' */ 0xf1: NewData += "&ntilde;"; break;
+            case /* L'ò' */ 0xf2: NewData += "&ograve;"; break;
+            case /* L'ó' */ 0xf3: NewData += "&oacute;"; break;
+            case /* L'ô' */ 0xf4: NewData += "&ocirc;"; break;
+            case /* L'õ' */ 0xf5: NewData += "&otilde;"; break;
+            case /* L'ö' */ 0xf6: NewData += "&ouml;"; break;
+            case /* L'÷' */ 0xf7: NewData += "&divide;"; break;
+            case /* L'ø' */ 0xf8: NewData += "&oslash;"; break;
+            case /* L'ù' */ 0xf9: NewData += "&ugrave;"; break;
+            case /* L'ú' */ 0xfa: NewData += "&uacute;"; break;
+            case /* L'û' */ 0xfb: NewData += "&ucirc;"; break;
+            case /* L'ü' */ 0xfc: NewData += "&uuml;"; break;
+            case /* L'ý' */ 0xfd: NewData += "&yacute;"; break;
+            case /* L'þ' */ 0xfe: NewData += "&thorn;"; break;
             default: NewData += Data[i]; break;
         }
     }
