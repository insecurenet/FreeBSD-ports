############################################################################
# condor_config.local
# Settings here override the defaults in condor_config.
# Make changes/additions here and leave condor_config unchanged so
# that defaults are documented.
############################################################################

############################################################################
# What machine is your central manager?
# Use $(FULL_HOSTNAME) if this is the central manager, or the central
# manager's hostname otherwise.

CONDOR_HOST = $(FULL_HOSTNAME)

############################################################################
# Pool's short description

COLLECTOR_NAME = Condor pool at $(CONDOR_HOST)

############################################################################
# If node is behind a firewall or NAT and cannot be directly reached, use
# CCB (Condor Connection Broker) or SHARED_PORTS.  The collector host is
# by default a connection broker, so it's usually the easiest way.

# CCB_ADDRESS = $(COLLECTOR_HOST)

############################################################################
# Location of logs, job output, etc.
# Put this on a local partition with plenty of space for job output.
# $(TILDE) = /home/condor.

LOCAL_DIR               = $(TILDE)

# If /home is shared by cluster compute nodes, log files would collide
# when using $(TILDE).  Put LOCAL_DIR on some other large, local partition.

# LOCAL_DIR               = /usr/condor

############################################################################
# Use dynamic provisioning to allow multicore jobs (e.g. openmp) on
# hosts with multiple cores available to HTCondor.

NUM_SLOTS=1
NUM_SLOTS_TYPE_1=1
SLOT_TYPE_1=100%
SLOT_TYPE_1_PARTITIONABLE=true

############################################################################
# When is this machine willing to start a job? 

# For compute hosts dedicated to HTCondor
# START = TRUE

# For compute hosts used primarily for other purposes
START = (KeyboardIdle > 15 * 60) && ((LoadAvg - CondorLoadAvg) <= 0.5)

# For VM host, assuming we only want to run jobs in the VM
# START = False

# For VM guest, run jobs only when the host is not being used by owner
# START = ( HOST_KeyboardIdle > 150 ) && ( HOST_LoadAvg <= 0.5 ) )

############################################################################
# When to suspend a job?

SUSPEND = FALSE

############################################################################
# When to nicely stop a job?
# (as opposed to killing it instantaneously)

# PREEMPT = FALSE

# Compute host used mainly for non-Condor activities
PREEMPT = (KeyboardIdle < 60) || (LoadAvg - CondorLoadAvg > 0.5)

############################################################################
# When to instantaneously kill a preempting job
# (e.g. if a job is in the pre-empting stage for too long)
# Should normally be set to FALSE

KILL = FALSE

###########################################################################
# DAEMON LIST:
#
# All hosts:            MASTER
# Central manager:      COLLECTOR, NEGOTIATOR
# Submit hosts:         SCHEDD
# Execute hosts:        STARTD
# Hosts behind NAT:     SHARED_PORT

# This macro determines what daemons the condor_master will start and 
# keep its watchful eyes on.
# The list is a comma or space separated list of subsystem names

# Central manager
# DAEMON_LIST = MASTER, COLLECTOR, NEGOTIATOR, SCHEDD

# Submit and execute host
# DAEMON_LIST = MASTER, SCHEDD, STARTD
# DAEMON_LIST = MASTER, SCHEDD, STARTD, SHARED_PORT

# Execute-only host
DAEMON_LIST = MASTER, STARTD
# DAEMON_LIST = MASTER, STARTD, SHARED_PORT

###########################################################################
# Permissions for this host
#
# *.your.domain, x.y.z.*, hostname, $(MACRO)
#
# ALLOW_ADMINISTRATOR is required by condor_off
# If central manager is not this host, this entry allows both the central
# manager and this host to manage the pool.
#
# For central manager, allow all other hosts, e.g. 192.168.0.*, to
# read and write.

ALLOW_ADMINISTRATOR = $(CONDOR_HOST), $(FULL_HOSTNAME)

#
# Enables condor_status, condor_q, ...

ALLOW_READ = $(CONDOR_HOST), $(FULL_HOSTNAME)

#
# Enables scheduling jobs here

ALLOW_WRITE = $(CONDOR_HOST), $(FULL_HOSTNAME)

###########################################################################
# Use the settings below for compute hosts behind a NAT firewall relative
# to the scheduler.  This includes virtual machines not using bridged
# networking.  See also CCB.

# USE_SHARED_PORT = True

# Use a different shared port for each host behind the same NAT gateway
# SHARED_PORT_ARGS = -p 9616

# Public IP of NAT gateway
# TCP_FORWARDING_HOST = 1.2.3.4

# Arbitrary name for private network behind NAT using SHARED_PORT or CCB.
# Nodes with same network name will talk to each other directly.
# PRIVATE_NETWORK_NAME = mypool

# Network device on private network, if multihomed
# PRIVATE_NETWORK_INTERFACE = bge0

###########################################################################
# For virtual machines to get keyboard activity and load from the host
# http://research.cs.wisc.edu/htcondor/manual/v8.2/3_12Setting_Up.html

########
# Host:

# Indicate hostnames or IPs of virtual machines in host condor_config:
# VMP_VM_LIST = 1.2.3.4

######
# VM:

# Indicate hostname or IP of host in virtual machine condor_config:
# VMP_HOST_MACHINE = 1.2.3.4
