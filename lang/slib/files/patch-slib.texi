--- slib.texi.orig	2012-10-23 21:17:29 UTC
+++ slib.texi
@@ -812,11 +812,13 @@
 Displays the information of @code{(slib:report-version)} followed by
 almost all the information neccessary for submitting a problem report.
 An unspecified value is returned.
+@end defun
 
-@defunx slib:report #t
+@defun slib:report #t
 provides a more verbose listing.
+@end defun
 
-@defunx slib:report filename
+@defun slib:report filename
 Writes the verbose report to file @file{filename}.
 
 @example
@@ -940,8 +942,9 @@
 current position of the character in @var{port} which will next be
 read or written.  If the implementation does not support
 file-position, then @code{#f} is returned.
+@end defun
 
-@defunx file-position port k
+@defun file-position port k
 @var{port} must be open to a file.  @code{file-position} sets the
 current position in @var{port} which will next be read or written.  If
 successful, @code{#t} is returned; otherwise @code{file-position}
@@ -3400,7 +3403,7 @@
 A character that specifies the conversion to be applied.
 @end itemize
 
-@subsubsection Exact Conversions
+Exact Conversions
 
 @table @asis
 @item @samp{b}, @samp{B}
@@ -3426,7 +3429,7 @@
 digits @samp{0123456789ABCDEF}.
 @end table
 
-@subsubsection Inexact Conversions
+Inexact Conversions
 
 @table @asis
 @item @samp{f}
@@ -3451,7 +3454,7 @@
 
 @end table
 
-@subsubsection Other Conversions
+Other Conversions
 @table @asis
 @item @samp{c}
 Print a single character.  The @samp{-} flag is the only one which can
@@ -4592,11 +4595,13 @@
 
 @defun tzset
 Returns the default time-zone.
+@end defun
 
-@defunx tzset tz
+@defun tzset tz
 Sets (and returns) the default time-zone to @var{tz}.
+@end defun
 
-@defunx tzset TZ-string
+@defun tzset TZ-string
 Sets (and returns) the default time-zone to that specified by
 @var{TZ-string}.
 
@@ -4670,11 +4675,13 @@
 
 @defun gmtime caltime
 Converts the calendar time @var{caltime} to UTC and returns it.
+@end defun
 
-@defunx localtime caltime tz
+@defun localtime caltime tz
 Returns @var{caltime} converted to UTC relative to timezone @var{tz}.
+@end defun
 
-@defunx localtime caltime
+@defun localtime caltime
 converts the calendar time @var{caltime} to a vector of integers
 expressed relative to the user's time zone.  @code{localtime} sets the
 variable @var{*timezone*} with the difference between Coordinated
@@ -4686,12 +4693,14 @@
 @defun gmktime univtime
 Converts a vector of integers in GMT Coordinated Universal Time (UTC)
 format to a calendar time.
+@end defun
 
-@defunx mktime univtime
+@defun mktime univtime
 Converts a vector of integers in local Coordinated Universal Time (UTC)
 format to a calendar time.
+@end defun
 
-@defunx mktime univtime tz
+@defun mktime univtime tz
 Converts a vector of integers in Coordinated Universal Time (UTC) format
 (relative to time-zone @var{tz})
 to calendar time.
@@ -5096,8 +5105,9 @@
 corresponding to each bit of the non-negative integer @var{k}.  #t is
 coded for each 1; #f for 0.  The @var{len} argument defaults to
 @code{(integer-length @var{k})}.
+@end defun
 
-@defunx list->integer list
+@defun list->integer list
 @code{list->integer} returns an integer formed from the booleans in the
 list @var{list}, which must be a list of booleans.  A 1 bit is coded for
 each #t; a 0 bit for #f.
@@ -5519,8 +5529,9 @@
 (cksum (in-vicinity (library-vicinity) "ratize.scm"))
 @result{} 157103930
 @end example
+@end defun
 
-@defunx cksum port
+@defun cksum port
 Computes the checksum of the bytes read from @var{port} until the
 end-of-file.
 
@@ -5539,8 +5550,9 @@
 @defun crc16 file
 
 Computes the USB data-packet (16-bit) CRC of @var{file}.
+@end defun
 
-@defunx crc16 port
+@defun crc16 port
 Computes the USB data-packet (16-bit) CRC of the bytes read from
 @var{port} until the end-of-file.
 
@@ -5552,8 +5564,9 @@
 @defun crc5 file
 
 Computes the USB token (5-bit) CRC of @var{file}.
+@end defun
 
-@defunx crc5 port
+@defun crc5 port
 Computes the USB token (5-bit) CRC of the bytes read from
 @var{port} until the end-of-file.
 
@@ -5747,8 +5760,9 @@
 
 @defun color? obj
 Returns #t if @var{obj} is a color.
+@end defun
 
-@defunx color? obj typ
+@defun color? obj typ
 Returns #t if @var{obj} is a color of color-space @var{typ}.  The symbol
 @var{typ} must be one of:
 
@@ -5961,14 +5975,16 @@
 Loads the Spectral Tristimulus Values
 @cite{CIE 1964 Supplementary Standard Colorimetric Observer},
 defining @var{cie:x-bar}, @var{cie:y-bar}, and @var{cie:z-bar}.
+@end deftp
 
-@deftpx {Feature} cie1931
+@deftp {Feature} cie1931
 @ftindex cie1931
 Loads the Spectral Tristimulus Values
 @cite{CIE 1931 Supplementary Standard Colorimetric Observer},
 defining @var{cie:x-bar}, @var{cie:y-bar}, and @var{cie:z-bar}.
+@end deftp
 
-@deftpx {Feature} ciexyz
+@deftp {Feature} ciexyz
 @ftindex ciexyz
 Requires Spectral Tristimulus Values, defaulting to cie1931,
 defining @var{cie:x-bar}, @var{cie:y-bar}, and @var{cie:z-bar}.
@@ -6037,8 +6053,9 @@
 computes the CIEXYZ(1931) values for the spectrum returned by @var{proc}
 when called with arguments from 380e-9 to 780e-9, the wavelength in
 meters.
+@end defun
 
-@defunx spectrum->XYZ spectrum x1 x2
+@defun spectrum->XYZ spectrum x1 x2
 @var{x1} and @var{x2} must be positive real numbers specifying the
 wavelengths (in meters) corresponding to the zeroth and last elements of
 vector or list @var{spectrum}.  @code{spectrum->XYZ} returns the
@@ -6160,8 +6177,9 @@
 scales each chromaticity so it sums to 1 or less; and divides the
 @var{Y} values by the maximum @var{Y} in the dataset, so all lie between
 0 and 1.
+@end defun
 
-@defunx xyY:normalize-colors colors n
+@defun xyY:normalize-colors colors n
 If @var{n} is positive real, then @code{xyY:normalize-colors} divides
 the @var{Y} values by @var{n} times the maximum @var{Y} in the dataset.
 
@@ -6206,8 +6224,9 @@
 
 @defun L*a*b*:DE* lab1 lab2
 Returns the Euclidean distance between @var{lab1} and @var{lab2}.
+@end defun
 
-@defunx CIE:DE* color1 color2 white-point
+@defun CIE:DE* color1 color2 white-point
 @defunx CIE:DE* color1 color2
 Returns the Euclidean distance in L*a*b* space between @var{color1} and
 @var{color2}.
@@ -6725,8 +6744,9 @@
 @var{sub-op2}, respectively.  The argument @var{reduction} is a
 procedure accepting 2 arguments which will be lists whose @code{car}s
 are @var{sub-op1} and @var{sub-op2}.
+@end defun
 
-@defunx cring:define-rule op sub-op1 'identity reduction
+@defun cring:define-rule op sub-op1 'identity reduction
 Defines a rule for the case when the operation represented by symbol
 @var{op} is applied to a list whose @code{car} is @var{sub-op1}, and
 some other argument.  @var{Reduction} will be called with the list whose
@@ -7211,8 +7231,9 @@
 returns the key-list identifying the lowest record higher than
 @var{key1} @var{key2} @dots{} which is stored in the relational-table;
 or false if no higher record is present.
+@end defop
 
-@defopx {Operation} {relational-table} isam-next column-name
+@defop {Operation} {relational-table} isam-next column-name
 The symbol @var{column-name} names a key field.  In the list returned
 by @code{isam-next}, that field, or a field to its left, will be
 changed.  This allows one to skip over less significant key fields.
@@ -7223,8 +7244,9 @@
 returns the key-list identifying the highest record less than
 @var{key1} @var{key2} @dots{} which is stored in the relational-table;
 or false if no lower record is present.
+@end defop
 
-@defopx {Operation} {relational-table} isam-prev column-name
+@defop {Operation} {relational-table} isam-prev column-name
 The symbol @var{column-name} names a key field.  In the list returned
 by @code{isam-next}, that field, or a field to its left, will be
 changed.  This allows one to skip over less significant key fields.
@@ -7264,8 +7286,9 @@
 names, or type names respectively for this table.  These 4 methods are
 different from the others in that the list is returned, rather than a
 procedure to obtain the list.
+@end defop
 
-@defopx {Operation} {relational-table} primary-limit
+@defop {Operation} {relational-table} primary-limit
 Returns the number of primary keys fields in the relations in this
 table.
 @end defop
@@ -7398,16 +7421,19 @@
 supplied, @code{open-command-database} will attempt to deduce the correct
 base-table-type.  If the database can not be opened or if it lacks the
 @code{*commands*} table, @code{#f} is returned.
+@end defun
 
-@defunx open-command-database! filename
+@defun open-command-database! filename
 @defunx open-command-database! filename base-table-type
 Returns @emph{mutable} open enhanced relational database @dots{}
+@end defun
 
-@defunx open-command-database database
+@defun open-command-database database
 Returns @var{database} if it is an immutable relational database; #f
 otherwise.
+@end defun
 
-@defunx open-command-database! database
+@defun open-command-database! database
 Returns @var{database} if it is a mutable relational database; #f
 otherwise.
 @end defun
@@ -7928,32 +7954,31 @@
 
 Prints the names of all the tables in @var{database} and sets browse's
 default to @var{database}.
-
-@deffnx {Procedure} browse
+@end deffn
+@deffn {Procedure} browse
 
 Prints the names of all the tables in the default database.
-
-@deffnx {Procedure} browse table-name
+@end deffn
+@deffn {Procedure} browse table-name
 
 For each record of the table named by the symbol @var{table-name},
 prints a line composed of all the field values.
-
-@deffnx {Procedure} browse pathname
+@end deffn
+@deffn {Procedure} browse pathname
 
 Opens the database named by the string @var{pathname}, prints the names
 of all its tables, and sets browse's default to the database.
-
-@deffnx {Procedure} browse database table-name
+@end deffn
+@deffn {Procedure} browse database table-name
 
 Sets browse's default to @var{database} and prints the records of the
 table named by the symbol @var{table-name}.
-
-@deffnx {Procedure} browse pathname table-name
+@end deffn
+@deffn {Procedure} browse pathname table-name
 
 Opens the database named by the string @var{pathname} and sets browse's
 default to it; @code{browse} prints the records of the table named by
 the symbol @var{table-name}.
-
 @end deffn
 
 
@@ -8576,8 +8601,9 @@
 describing the columns of a new base table in this database, otherwise
 returns @code{#f}.  For the fields and layout of descriptor tables,
 @xref{Catalog Representation}.
+@end defop
 
-@defopx {Operation} {relational-database} create-table table-name table-desc-name
+@defop {Operation} {relational-database} create-table table-name table-desc-name
 Returns a methods procedure for a new (open) relational table with
 columns as described by @var{table-desc-name}, otherwise returns
 @code{#f}.
@@ -9900,14 +9926,16 @@
 @defun list-of?? predicate
 Returns a predicate which returns true if its argument is a list every
 element of which satisfies @var{predicate}.
+@end defun
 
-@defunx list-of?? predicate low-bound high-bound
+@defun list-of?? predicate low-bound high-bound
 @var{low-bound} and @var{high-bound} are non-negative integers.
 @code{list-of??} returns a predicate which returns true if its argument
 is a list of length between @var{low-bound} and @var{high-bound}
 (inclusive); every element of which satisfies @var{predicate}.
+@end defun
 
-@defunx list-of?? predicate bound
+@defun list-of?? predicate bound
 @var{bound} is an integer.  If @var{bound} is negative, @code{list-of??}
 returns a predicate which returns true if its argument is a list of
 length greater than @code{(- @var{bound})}; every element of which
@@ -10684,16 +10712,19 @@
 @deffn {Procedure} find-string-from-port? str in-port max-no-chars
 Looks for a string @var{str} within the first @var{max-no-chars} chars
 of the input port @var{in-port}.
+@end deffn
 
-@deffnx {Procedure} find-string-from-port? str in-port
+@deffn {Procedure} find-string-from-port? str in-port
 When called with two arguments, the search span is limited by the end of
 the input stream.
+@end deffn
 
-@deffnx {Procedure} find-string-from-port? str in-port char
+@deffn {Procedure} find-string-from-port? str in-port char
 Searches up to the first occurrence of character @var{char} in
 @var{str}.
+@end deffn
 
-@deffnx {Procedure} find-string-from-port? str in-port proc
+@deffn {Procedure} find-string-from-port? str in-port proc
 Searches up to the first occurrence of the procedure @var{proc}
 returning non-false when called with a character (from @var{in-port})
 argument.
@@ -11635,12 +11666,14 @@
 @deffn {Procedure} trace-all file @dots{}
 Traces (@pxref{Trace}) all procedures @code{define}d at top-level in
 @file{file} @dots{}.
+@end deffn
 
-@deffnx {Procedure} track-all file @dots{}
+@deffn {Procedure} track-all file @dots{}
 Tracks (@pxref{Trace}) all procedures @code{define}d at top-level in
 @file{file} @dots{}.
+@end deffn
 
-@deffnx {Procedure} stack-all file @dots{}
+@deffn {Procedure} stack-all file @dots{}
 Stacks (@pxref{Trace}) all procedures @code{define}d at top-level in
 @file{file} @dots{}.
 @end deffn
@@ -11676,8 +11709,9 @@
 @defun continue
 Pops the topmost continuation off of the continuation stack and returns
 an unspecified value to it.
+@end defun
 
-@defunx continue arg1 @dots{}
+@defun continue arg1 @dots{}
 Pops the topmost continuation off of the continuation stack and returns
 @var{arg1} @dots{} to it.
 @end defun
@@ -11685,7 +11719,9 @@
 @defmac break proc1 @dots{}
 Redefines the top-level named procedures given as arguments so that
 @code{breakpoint} is called before calling @var{proc1} @dots{}.
-@defmacx break
+@end defmac
+
+@defmac break
 With no arguments, makes sure that all the currently broken identifiers
 are broken (even if those identifiers have been redefined) and returns a
 list of the broken identifiers.
@@ -11693,7 +11729,9 @@
 
 @defmac unbreak proc1 @dots{}
 Turns breakpoints off for its arguments.
-@defmacx unbreak
+@end defmac
+
+@defmac unbreak
 With no arguments, unbreaks all currently broken identifiers and returns
 a list of these formerly broken identifiers.
 @end defmac
@@ -11768,7 +11806,9 @@
 
 @defmac trace proc1 @dots{}
 Traces the top-level named procedures given as arguments.
-@defmacx trace
+@end defmac
+
+@defmac trace
 With no arguments, makes sure that all the currently traced identifiers
 are traced (even if those identifiers have been redefined) and returns a
 list of the traced identifiers.
@@ -11776,7 +11816,8 @@
 
 @defmac track proc1 @dots{}
 Traces the top-level named procedures given as arguments.
-@defmacx track
+@end defmac
+@defmac track
 With no arguments, makes sure that all the currently tracked identifiers
 are tracked (even if those identifiers have been redefined) and returns
 a list of the tracked identifiers.
@@ -11784,7 +11825,8 @@
 
 @defmac stack proc1 @dots{}
 Traces the top-level named procedures given as arguments.
-@defmacx stack
+@end defmac
+@defmac stack
 With no arguments, makes sure that all the currently stacked identifiers
 are stacked (even if those identifiers have been redefined) and returns
 a list of the stacked identifiers.
@@ -11792,21 +11834,24 @@
 
 @defmac untrace proc1 @dots{}
 Turns tracing, tracking, and  off for its arguments.
-@defmacx untrace
+@end defmac
+@defmac untrace
 With no arguments, untraces all currently traced identifiers and returns
 a list of these formerly traced identifiers.
 @end defmac
 
 @defmac untrack proc1 @dots{}
 Turns tracing, tracking, and  off for its arguments.
-@defmacx untrack
+@end defmac
+@defmac untrack
 With no arguments, untracks all currently tracked identifiers and returns
 a list of these formerly tracked identifiers.
 @end defmac
 
 @defmac unstack proc1 @dots{}
 Turns tracing, stacking, and  off for its arguments.
-@defmacx unstack
+@end defmac
+@defmac unstack
 With no arguments, unstacks all currently stacked identifiers and returns
 a list of these formerly stacked identifiers.
 @end defmac
