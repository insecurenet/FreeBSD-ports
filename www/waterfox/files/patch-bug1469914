commit 051d1b6a48a7
Author: Gabriele Svelto <gsvelto@mozilla.com>
Date:   Fri Jun 22 00:35:08 2018 +0200

    Bug 1469914 - Prevent the HAL from registering duplicate observers; r=froydnj a=lizzard
    
    This also replaces the custom logic in ObserverList with an nsTObserverArray
    which has all the necessary logic for stable iteration over a potentially
    changing list of items. Unused dependencies were also removed.
    
    --HG--
    extra : source : 303478f7f248470a1c747f42dad9cb85c3129f0a
    extra : intermediate-source : 8e6dea408b0ee63ec1c675b8b0293c0ee2d100dd
---
 hal/Hal.cpp         |  3 ---
 hal/Hal.h           |  1 -
 xpcom/ds/Observer.h | 33 ++++++++-------------------------
 3 files changed, 8 insertions(+), 29 deletions(-)

diff --git hal/Hal.cpp hal/Hal.cpp
index 1b32db73e2508..e03b7fdfab2f6 100644
--- hal/Hal.cpp
+++ hal/Hal.cpp
@@ -20,10 +20,7 @@
 #include "nsJSUtils.h"
 #include "mozilla/ClearOnShutdown.h"
 #include "mozilla/Observer.h"
-#include "mozilla/Services.h"
-#include "mozilla/StaticPtr.h"
 #include "mozilla/dom/ContentChild.h"
-#include "mozilla/dom/ContentParent.h"
 #include "mozilla/dom/ScreenOrientation.h"
 #include "WindowIdentifier.h"
 
diff --git hal/Hal.h hal/Hal.h
index 787b7ed5f3890..311c5c8b50118 100644
--- hal/Hal.h
+++ hal/Hal.h
@@ -17,7 +17,6 @@
 #include "mozilla/hal_sandbox/PHal.h"
 #include "mozilla/HalScreenConfiguration.h"
 #include "mozilla/HalTypes.h"
-#include "mozilla/Observer.h"
 #include "mozilla/Types.h"
 
 /*
diff --git xpcom/ds/Observer.h xpcom/ds/Observer.h
index 83d650a936ccc..9e782949c8e5e 100644
--- xpcom/ds/Observer.h
+++ xpcom/ds/Observer.h
@@ -7,7 +7,7 @@
 #ifndef mozilla_Observer_h
 #define mozilla_Observer_h
 
-#include "nsTArray.h"
+#include "nsTObserverArray.h"
 
 namespace mozilla {
 
@@ -48,7 +48,7 @@ public:
    */
   void AddObserver(Observer<T>* aObserver)
   {
-    mObservers.AppendElement(aObserver);
+    mObservers.AppendElementUnlessExists(aObserver);
   }
 
   /**
@@ -57,17 +57,7 @@ public:
    */
   bool RemoveObserver(Observer<T>* aObserver)
   {
-    if (mObservers.RemoveElement(aObserver)) {
-      if (!mBroadcastCopy.IsEmpty()) {
-        // Annoyingly, someone could RemoveObserver() an item on the list
-        // while we're in a Broadcast()'s Notify() call.
-        auto i = mBroadcastCopy.IndexOf(aObserver);
-        MOZ_ASSERT(i != mBroadcastCopy.NoIndex);
-        mBroadcastCopy[i] = nullptr;
-      }
-      return true;
-    }
-    return false;
+    return mObservers.RemoveElement(aObserver);
   }
 
   uint32_t Length()
@@ -77,25 +67,18 @@ public:
 
   /**
    * Call Notify() on each item in the list.
-   * Handles the case of Notify() calling RemoveObserver()
    */
   void Broadcast(const T& aParam)
   {
-    MOZ_ASSERT(mBroadcastCopy.IsEmpty());
-    mBroadcastCopy = mObservers;
-    uint32_t size = mBroadcastCopy.Length();
-    for (uint32_t i = 0; i < size; ++i) {
-      // nulled if Removed during Broadcast
-      if (mBroadcastCopy[i]) {
-        mBroadcastCopy[i]->Notify(aParam);
-      }
+    typename nsTObserverArray<Observer<T>*>::ForwardIterator iter(mObservers);
+    while (iter.HasMore()) {
+      Observer<T>* obs = iter.GetNext();
+      obs->Notify(aParam);
     }
-    mBroadcastCopy.Clear();
   }
 
 protected:
-  nsTArray<Observer<T>*> mObservers;
-  nsTArray<Observer<T>*> mBroadcastCopy;
+  nsTObserverArray<Observer<T>*> mObservers;
 };
 
 } // namespace mozilla
